<style lang="less">
@import "../../style/global.less";
.container {
  background-color: #f8f8f8;
  color: #000;
  .weui-cells {
    padding: 0 46rpx;
  }
  .weui-cell__ft_in-access {
    padding-right: 46rpx;
  }
  .user-box {
    margin-top: 20rpx;
    font-size: 28rpx;
    box-shadow: 0 4rpx 10rpx rgba(0, 0, 0, 0.07);
    .head-img {
      padding: 20rpx 8rpx 18rpx;
      image {
        background-color: #fff;
        width: 160rpx;
        height: 160rpx;
        border-radius: 50%;
        vertical-align: middle;
      }
    }
    .user-name {
      padding: 50rpx 8rpx 54rpx;
      .weui-cell__ft {
        color: @c999;
      }
    }
  }
  .modal {
    & > view {
      padding: 60rpx 40rpx;
      box-sizing: border-box;
      i.close {
        position: absolute;
        top: 20rpx;
        right: 20rpx;
      }
      textarea {
        margin-bottom: 40rpx;
        padding: 20rpx;
        height: 300rpx;
        width: auto;
        background-color: #f5f5f5;
      }
    }
  }
}
</style>


<template>
  <view class="container">
    <view class="weui-cells weui-cells_after-title user-box">
      <view class="weui-cell weui-cell_access head-img" hover-class="weui-cell_active" @tap="chooseImage">
        <view class="weui-cell__bd">头像</view>
        <view class="weui-cell__ft weui-cell__ft_in-access">
          <image src="{{ profile.photo }}"></image>
        </view>
      </view>
      <view class="weui-cell weui-cell_access user-name" @tap="showDialog">
        <view class="weui-cell__bd">用户名</view>
        <view class="weui-cell__ft weui-cell__ft_in-access">{{ profile.name }}</view>
      </view>
    </view>
    <view class="modal" hidden="{{ !isShowAddUserNameDialog }}">
      <view>
        <i class="foton-ui close" @tap="hideDialog"></i>
        <textarea placeholder="请输入要修改的用户名" @input="onInputUserName" />
        <button class="btn-blue" @tap="updateUserName">确定</button>
      </view>
    </view>
  </view>
</template>


<script>
import wepy from 'wepy';
import { connect } from 'wepy-redux';
import profileService from '../../services/profile';
import toast from '../../lib/toast';
import ajaxProvider from '../../providers/ajax';
let count = 0;
@connect({
  profile (state) {
    return state.profile.user;
  }
})

export default class ProfileUserInformation extends wepy.page {

  config = {
    navigationBarTitleText: '个人信息'
  };
  components = {

  };

  mixins = [];

  data = {
    isShowAddUserNameDialog: false,
    userName: '',
    param: {
      'data.photo': '',
      'data.id': '',
      'data.name': '',
      'data.fullname': '',
      'data.title': '',
      'data.email': '',
      'data.phone': '',
      'data.mobile': '',
      'data.fax': '',
      'data.address': '',
      'data.zip': '',
      'data.rememberKey': '7861e2456f09431cb5194e4c64eeb45f'
    }
  };

  methods = {
    async chooseImage () {
      let chooseResult = await wepy.chooseImage({
        count: 1,
        sizeType: ['compressed'],
        sourceType: ['album', 'camera']
      });

      let tempFilePaths = chooseResult.tempFilePaths;
      let file = chooseResult.tempFiles[0];

      if (file.size >= 5 * 1024 * 1024) {
        return toast.error('需小于5M');
      }
      if (tempFilePaths.length === 0) {
        return;
      }
      let name = tempFilePaths[0].split('/');
      name = name[name.length - 1];
      let uploadResult = await wepy.uploadFile({
        url: ajaxProvider.getApiInfo('uploadAvatar').url,
        filePath: tempFilePaths[0],
        name: 'avatar',
        formData: {
          id: 'WU_FILE_' + (count++),
          name: name
        },
        header: {
          cookie: wepy.getStorageSync('cookie')
        }
      });
      wepy.showLoading({
        title: '上传中'
      });
      console.log(uploadResult.data);
      uploadResult = uploadResult.data && JSON.parse(uploadResult.data);
      if (uploadResult.error) {
        return toast.error(uploadResult.error);
      }
      wepy.hideLoading();
      toast.success('上传成功');
      this.$apply();
    },

    hideDialog () {
      this.hideAddUserNameDialog();
    },

    showDialog () {
      this.showAddUserNameDialog();
    },

    onInputUserName (e) {
      // this.param.data.fullname = e.detail.value.trim();
    },

    async updateUserName () {

      console.log(this.param);
      // if (this.param.data.fullname.length === 0) {
        // return;
      // }

      wepy.showLoading({
        title: '保存中'
      });
      let result = await profileService.updateUserName(this.param);
      toast.showByResult(result);
      if (result.code === 200) {
        this.hideAddUserNameDialog();
      }
      wepy.hideLoading();
      this.$apply();
    }
  };

  events = {
  };

  hideAddUserNameDialog () {
    this.isShowAddUserNameDialog = false;
  }

  showAddUserNameDialog () {
    this.isShowAddUserNameDialog = true;
  }
}
</script>
