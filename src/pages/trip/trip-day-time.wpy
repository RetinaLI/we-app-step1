<style lang="less">
  .function () {
    .rpx (@x) {
      return: @x * 2rpx;
    }
  }

  .trip-day {
    padding: 0 rpx(8);
    .line-eee {
      border-bottom: 1px solid #eee;
    }
    .day-run {
      .day-map {
        box-shadow: 0 rpx(2) rpx(5) 0 rgba(0, 0, 0, 0.07);
        background: #fff;
        border-radius: rpx(10);
        overflow: hidden;
        #day-map-time {
          width: 100%;
          height: rpx(260);
        }
        .day-map-cover {
          width: 100%;
          /*height: 100%;*/
          background: rgba(0, 0, 0, .3);
        }
        .scroll-map-title {
          box-sizing: border-box;
          padding: 0 rpx(10);
          width: 100%;
          overflow: hidden;
          white-space: nowrap;
        }
        .map-line-title-list {
          display: inline-block;
          padding: 0 rpx(10) 0 rpx(28);
          box-sizing: border-box;
        }
        .map-line-title {
          box-sizing: border-box;
          height: rpx(75);
          padding-top: rpx(13);
          .map-line-title-item {
            align-items: center;
            margin-bottom: rpx(13);
            text:nth-of-type(1) {
              display: flex;
              justify-content: center;
              align-items: center;
              margin-right: rpx(9);
              width: rpx(17);
              height: rpx(17);
              line-height: 0;
              border-radius: 50%;
              font-size: rpx(10);
              color: #fff;
              background: #000;
            }
            text:nth-of-type(2) {
              margin-right: rpx(4);
              line-height: rpx(17);
              color: #666;
              font-weight: 600;
              font-size: rpx(15);
            }
            text:nth-of-type(3) {
              margin-right: rpx(4);
              line-height: rpx(17);
              color: #999;
              font-weight: 400;
              font-size: rpx(10);
            }
          }
        }
        .map-echart {
          margin: 0 rpx(10);
          padding: rpx(22) 0;
          & > view {
            flex: 1;
          }
          .map-echart-info {
            .map-echart-info-item {
              line-height: rpx(32);
              font-size: rpx(12);
              text:nth-of-type(1) {
                color: #333;
              }
              text:nth-of-type(2) {
                padding-left: rpx(5);
                color: #4475FD;
                font-weight: 600;
              }
            }
          }
        }
      }
    }
  }

  .my-swiper {
    height: rpx(70);
    padding: rpx(10) 0 rpx(5);
  }

  .day-time-swiper-item {
    justify-content: space-between;
    box-shadow: 0 rpx(2) rpx(5) 0 rgba(0, 0, 0, 0.07);
    padding: rpx(15) rpx(13);
    margin: 0 rpx(5);
    background-color: #fff;
    border-radius: rpx(10);
    .day-time-swiper-item-start {
      flex: 1;
      font-size: rpx(10);
      .icon {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-right: rpx(6);
        width: rpx(20);
        height: rpx(20);
        border-radius: 50%;
        color: #fff;
        background-color: #01C878;
      }
      .info {
        flex: 1;
        overflow: hidden;
        & > text {
          display: block;
        }
        text:nth-of-type(1) {
          margin-bottom: rpx(5);
          color: #444;
          font-weight: 600;
        }
        text:nth-of-type(2) {
          color: #999;
          width: rpx(100);
          overflow: hidden;
          text-overflow: ellipsis;
          white-space: nowrap;
        }
      }
    }
    .day-time-swiper-item-end {
      .icon {
        background-color: #FF4444;
      }
    }
  }

  .map-echart-time, .mapTimeRadar {
    width: 100%;
    height: rpx(140);
  }

  #day-map2 {
    width: 100%;
    height: rpx(260);
  }

  .no-part {
    box-shadow: none;
    margin-bottom: 0;
  }
</style>
<template>
  <swiper previous-margin="68rpx" next-margin="68rpx" class="my-swiper"
          bindchange="changeItem">
    <repeat for="{{dayTime}}" index="index" item="item">
      <swiper-item>
        <view class="day-time-swiper-item flex">
          <view class="day-time-swiper-item-start flex">
            <text class="icon">起</text>
            <view class="info">
              <text>{{item.startTime}}</text>
              <text>北京市了科技管理简单实际付款建设路口了会计师法律纠纷</text>
            </view>
          </view>
          <view
            class="day-time-swiper-item-start flex day-time-swiper-item-end">
            <text class="icon">终</text>
            <view class="info">
              <text>{{item.endTime}}</text>
              <text>北京市了科技管理简单实际付款建设路口了会计师法律纠纷</text>
            </view>
          </view>
        </view>
      </swiper-item>
    </repeat>
  </swiper>
  <view class="trip-day">
    <view class="day-run">
      <view class="day-map">
        <view class="part no-part">
          <operationSituation :operations.sync="operations"/>
        </view>
        <map id="day-map2" include-points="{{includePoints}}"
             markers="{{markers}}" polyline="{{polyline}}">
          <cover-view class="day-map-cover"></cover-view>
        </map>
      </view>
    </view>
    <noMore></noMore>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import OperationSituation from '../../components/trip/operation-situation';
  import tripService from '../../services/trip';
  import numToFixed from '../../lib/numToFixed';
  import secToTime from '../../lib/secToTime';
  import NoMore from '../../components/no-more';

  export default class TripDayTime extends wepy.page {
    data = {
      operations: [
        {
          img: '../../assets/trip/oper-icon-01.png',
          title: '行驶里程',
          val: 0,
          unit: 'km',
        },
        {
          img: '../../assets/trip/oper-icon-02.png',
          title: '行驶时长',
          val: 0,
        },
        {
          img: '../../assets/trip/oper-icon-05.png',
          title: '平均速度',
          val: 0,
          unit: 'km/h',
        },
        {
          img: '../../assets/trip/oper-icon-10.png',
          title: '最大速度',
          val: 0,
          unit: 'km/h',
        },
      ],
      dayTime: [],
      markers: [],
      includePoints: [],
      polyline: [],
      year: 0,
      month: 0,
      day: 0,
      carId: '',
      currentTime: 0,
    };

    computed = {};

    components = {
      noMore: NoMore,
      operationSituation: OperationSituation,
    };

    methods = {};

    changeItem(e) {
      if (e.detail.source === 'touch') {
        this.currentTime = e.detail.current || 0;
        this.getMapList(this.dayTime[this.currentTime]);
        this.$apply();
      }
    };

    getMapList(item) {
      this.operations[0].val = item.mileage;
      this.operations[1].val = item.workTime;
      this.operations[2].val = item.avgVelocity;
      this.operations[3].val = item.maxVelocity;
      let data = JSON.parse(wx.getStorageSync('map'));
      let start = data.findIndex((ele) => {
        return (new Date(item.startTime).getTime()) <=
          (new Date(ele.dataTime).getTime());
      });
      let end = data.findIndex((ele) => {
        return (new Date(item.endTime).getTime()) <=
          (new Date(ele.dataTime).getTime());
      });
      let newData = data.slice(start, end + 1);
      let len = newData.length;
      this.includePoints = newData;
      this.polyline = [
        {
          points: newData,
          color: '#FF0000',
          width: 2,
          dottedLine: false,
        }];
      let iconPath = '';
      let iconPath1 = '../../assets/trip/icon-start.png';
      let iconPath2 = '../../assets/trip/icon-end.png';
      let iconPath3 = '../../assets/trip/tran.png';
      newData.map((ele, i) => {
        if (i === 0) {
          iconPath = iconPath1;
        } else if (i === len - 1) {
          iconPath = iconPath2;
        } else {
          iconPath = iconPath3;
        }
        return Object.assign(ele, {
          id: i,
          iconPath,
          width: 21,
          height: 27,
          zIndex: 2,
        });
      });
      this.markers = newData;
      this.$apply();
    };

    async getData(carId, day) {
      // 获取分段行程
      let data = await tripService.getTripDayTime({
        day,
        carId,
      });
      if (data.code === 200) {
        this.dayTime = data.list.map(ele => {
          return Object.assign(ele, {
            mileage: numToFixed(ele.mileage / 1000, 1),
            workTime: secToTime(Math.round((new Date(ele.endTime).getTime() -
              new Date(ele.startTime).getTime()) / 1000)),
            avgVelocity: numToFixed(ele.avgVelocity),
            maxVelocity: numToFixed(ele.maxVelocity),
          });
        });
        // 调用一次获取地图数据
        this.getMapList(this.dayTime[this.currentTime]);
        this.$apply();
      }
    };

    events = {};

    onUnload() {
      this.$broadcast('destroy-echarts');
    }

    onLoad(option) {
      // console.log(option);
      this.year = option.y.split('-')[0];
      this.month = option.y.split('-')[1];
      this.day = option.y.split('-')[2];
      wepy.setNavigationBarTitle({
        title: `${this.year}年${this.month}月${this.day}日分段行程`,
      });
      this.carId = option.carId;
      this.getData(this.carId, option.y);
      this.$apply();
    }
  }
</script>
